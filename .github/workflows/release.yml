name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      FORCE_UPDATE: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          CI: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'QuickClipboard ${{ github.ref_name }}'
          releaseBody: 'https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: false

      - name: Add forceUpdate field and upload updater JSON
        shell: pwsh
        run: |
          $forceUpdate = "${{ env.FORCE_UPDATE }}"
          
          # 查找可能的 JSON 文件路径
          $possiblePaths = @(
            "src-tauri/target/release/bundle/latest.json",
            "src-tauri/target/release/latest.json",
            "latest.json",
            "target/release/latest.json",
            "src-tauri/latest.json"
          )
          
          Write-Host "查找 latest.json 文件..."
          $jsonPath = $null
          foreach ($path in $possiblePaths) {
            Write-Host "检查路径: $path"
            if (Test-Path $path) {
              $jsonPath = $path
              Write-Host "找到文件: $path"
              break
            }
          }
          
          # 还是找不到，搜索整个目录
          if (-not $jsonPath) {
            Write-Host "在常见路径中未找到，搜索整个工作目录..."
            $foundFiles = Get-ChildItem -Path . -Name "latest.json" -Recurse -ErrorAction SilentlyContinue
            if ($foundFiles) {
              $jsonPath = $foundFiles[0]
              Write-Host "搜索到文件: $jsonPath"
            }
          }
          
          if ($jsonPath -and (Test-Path $jsonPath)) {
            Write-Host "找到 latest.json 文件，添加 forceUpdate 字段"
            
            # 读取 JSON 文件
            $json = Get-Content $jsonPath -Raw | ConvertFrom-Json
            
            # 添加 forceUpdate 字段
            $json | Add-Member -MemberType NoteProperty -Name "forceUpdate" -Value ($forceUpdate -eq "true") -Force
            
            # 写回文件
            $json | ConvertTo-Json -Depth 10 | Set-Content $jsonPath -Encoding UTF8
            
            Write-Host "已添加 forceUpdate = $forceUpdate"
            Write-Host "更新后的 JSON 内容:"
            Get-Content $jsonPath
            
            # 手动上传 latest.json 到 GitHub Release
            Write-Host "上传 latest.json 到 GitHub Release..."
            
            $releaseTag = "${{ github.ref_name }}"
            $repoOwner = "${{ github.repository_owner }}"
            $repoName = "${{ github.event.repository.name }}"
            
            # 获取 Release ID
            $headers = @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "Accept" = "application/vnd.github.v3+json"
            }
            
            $releaseUrl = "https://api.github.com/repos/$repoOwner/$repoName/releases/tags/$releaseTag"
            $release = Invoke-RestMethod -Uri $releaseUrl -Headers $headers -Method Get
            $releaseId = $release.id
            
            Write-Host "Release ID: $releaseId"
            
            # 检查是否已存在 latest.json 资产
            $existingAsset = $release.assets | Where-Object { $_.name -eq "latest.json" }
            if ($existingAsset) {
              Write-Host "删除现有的 latest.json 资产..."
              $deleteUrl = "https://api.github.com/repos/$repoOwner/$repoName/releases/assets/$($existingAsset.id)"
              Invoke-RestMethod -Uri $deleteUrl -Headers $headers -Method Delete
            }
            
            # 上传新的 latest.json
            $uploadUrl = "https://uploads.github.com/repos/$repoOwner/$repoName/releases/$releaseId/assets?name=latest.json"
            $jsonContent = Get-Content $jsonPath -Raw
            $jsonBytes = [System.Text.Encoding]::UTF8.GetBytes($jsonContent)
            
            $uploadHeaders = @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "Content-Type" = "application/json"
            }
            
            Invoke-RestMethod -Uri $uploadUrl -Headers $uploadHeaders -Method Post -Body $jsonBytes
            Write-Host "latest.json 上传完成"
            
          } else {
            Write-Host "错误: 未找到 latest.json 文件"
            Write-Host "当前工作目录内容:"
            Get-ChildItem -Recurse -Name "*.json" | Where-Object { $_ -like "*latest*" -or $_ -like "*update*" } | ForEach-Object { Write-Host "  $_" }
          }
